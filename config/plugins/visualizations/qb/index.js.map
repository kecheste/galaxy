{"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;CAQC;;;;;AAOD,4DAA4D,GAC5D,MAAM,qCAAe;AACrB,SAAS,0CAAoB,IAAI,EAAE,IAAI;IACrC,OAAO,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,oCAAc;AACjD;AAEA,SAAS,4BAAM,KAAK;IAClB,qBACE,gCAAC,CAAA,GAAA,+BAAc;QACb,KAAK,MAAM,GAAG;QACd,UAAU,MAAM,IAAI;QACpB,aAAa;YAAE,QAAQ;gBAAE,MAAM,MAAM,IAAI;YAAC;QAAE;kBAE5C,cAAA,gCAAC,CAAA,GAAA,mBAAE;YAAE,cAAc,MAAM,QAAQ;;;AAGvC;AAEA,OAAO,aAAa,GAAG,OAAO,aAAa,IAAI,CAAC;AAChD,OAAO,aAAa,CAAC,IAAI,GAAG,SAAU,OAAO;IAC3C,MAAM,UAAU,QAAQ,OAAO;IAC/B,MAAM,WAAW,QAAQ,KAAK,CAAC,QAAQ;IACvC,MAAM,WAAW,SAAS,GAAG,CAAC;IAC9B,MAAM,MACJ,OAAO,QAAQ,CAAC,MAAM,GACtB,0CACE,QAAQ,IAAI,EACZ,mBAAmB,QAAQ,EAAE,GAAG;IAEpC,MAAM,OAAO,CAAA,GAAA,gCAAS,EAAE,SAAS,cAAc,CAAC,QAAQ,MAAM;IAC9D,KAAK,MAAM,eACT,gCAAC;QACC,KAAK;QACL,MAAM,QAAQ,IAAI;QAClB,UAAU,QAAQ,SAAS;QAC3B,UAAU;;IAGd,QAAQ,KAAK,CAAC,KAAK,CAAC,MAAM;IAC1B,QAAQ,OAAO,CAAC,OAAO;AACzB;IAEA,2CAAe","sources":["src/script.js"],"sourcesContent":["/**\n * Visualizer interface for h5web (https://github.com/silx-kit/h5web)\n *\n * This relies on Galaxy being able to serve files using the\n * h5grove protocol (https://silx-kit.github.io/h5grove/).\n * This provides efficient access to the contents of the\n * HDF5 file and avoids having to read the whole file at any\n * point.\n */\n\nimport \"./styles.css\";\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { App, H5GroveProvider } from \"@h5web/app\";\n\n/* This will be part of the charts/viz standard lib in 23.1 */\nconst slashCleanup = /(\\/)+/g;\nfunction prefixedDownloadUrl(root, path) {\n  return `${root}/${path}`.replace(slashCleanup, \"/\");\n}\n\nfunction MyApp(props) {\n  return (\n    <H5GroveProvider\n      url={props.url}\n      filepath={props.name}\n      axiosConfig={{ params: { file: props.name } }}\n    >\n      <App explorerOpen={props.explorer} />\n    </H5GroveProvider>\n  );\n}\n\nwindow.bundleEntries = window.bundleEntries || {};\nwindow.bundleEntries.load = function (options) {\n  const dataset = options.dataset;\n  const settings = options.chart.settings;\n  const explorer = settings.get(\"explorer\");\n  const url =\n    window.location.origin +\n    prefixedDownloadUrl(\n      options.root,\n      \"/api/datasets/\" + dataset.id + \"/content\"\n    );\n  const root = createRoot(document.getElementById(options.target));\n  root.render(\n    <MyApp\n      url={url}\n      name={dataset.name}\n      filepath={dataset.file_name}\n      explorer={explorer}\n    />\n  );\n  options.chart.state(\"ok\", \"Chart drawn.\");\n  options.process.resolve();\n};\n\nexport default MyApp;\n"],"names":[],"version":3,"file":"index.js.map"}